import type { Field } from '../field.js';
import type { FlexibleProvable, InferProvable } from './struct.js';
import type { Provable } from './provable-intf.js';
import { From } from '../../../bindings/lib/provable-generic.js';
import { TupleN } from '../../util/types.js';
export { witness, witnessAsync, witnessFields };
declare function witness<A extends Provable<any, any>, T extends From<A> = From<A>>(type: A, compute: () => T): InferProvable<A>;
declare function witnessAsync<T, S extends FlexibleProvable<T> = FlexibleProvable<T>>(type: S, compute: () => Promise<T>): Promise<T>;
declare function witnessFields<N extends number, C extends () => TupleN<bigint | Field, N>>(size: N, compute: C): TupleN<Field, N>;
